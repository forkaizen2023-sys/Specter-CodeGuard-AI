/**
 * M√≥dulo Specter para la Orquestaci√≥n de IA Integrada (Gemini Nano).
 * Implementa la Estrategia H√≠brida Inteligente (Clasificaci√≥n para Escalada).
 */
export const NanoIntegrator = {

    // ----------------------------------------------------------------------
    // 1. FUNCI√ìN CR√çTICA: CLASIFICACI√ìN DE RIESGO PRELIMINAR (PROMPT API)
    // ----------------------------------------------------------------------
    /**
     * Clasifica el riesgo del c√≥digo utilizando la Prompt API para decidir si escalar al backend (Cloud Run).
     * @param {string} code - Snippet de c√≥digo a clasificar.
     * @returns {Promise<{severity: string, message: string}>} 'LOW', 'POSSIBLE', o 'ERROR' riesgo.
     */
    classifyRiskPreliminarily: async (code) => {
        if (!navigator.prompt) return { severity: "ERROR", message: "Nano API no disponible para clasificaci√≥n." };

        // Prompt de Clasificaci√≥n Specter: Pedimos un output binario y estricto.
        const classificationPrompt = 
            "Classify the security risk of this code. Output ONLY the word 'LOW' if the code is clean (no DB, no network, no eval) or 'POSSIBLE' if it contains variables, DB access, or functions that need deep review.";

        try {
            const response = await navigator.prompt.prompt({ 
                text: code, 
                prompt: classificationPrompt 
            });
            
            // Normalizamos el resultado para un chequeo limpio en App.js
            const classification = response.text.trim().toUpperCase();
            
            return { 
                severity: classification, 
                message: `Clasificado: ${classification}`
            };

        } catch (e) {
            console.error("Nano Classification Fall√≥:", e);
            return { severity: "ERROR", message: "Fallo de clasificaci√≥n Nano." };
        }
    },

    // ----------------------------------------------------------------------
    // 2. FUNCI√ìN DE CUMPLIMIENTO: Proofreader API üìù
    // ----------------------------------------------------------------------
    proofreadComments: async (text) => {
        if (!navigator.proofreader) return { status: 'ERROR', text: text };
        
        try {
            const result = await navigator.proofreader.proofread({ text });
            return { status: 'OK', text: result.text };
        } catch (e) {
            console.error("Nano Proofreader Fall√≥:", e);
            return { status: 'FAIL', text: text };
        }
    },

    // ----------------------------------------------------------------------
    // 3. FUNCI√ìN DE CUMPLIMIENTO: Translator API üåê
    // ----------------------------------------------------------------------
    translateError: async (text, targetLang = 'en') => {
        if (!navigator.translator) return text;
        try {
            const translated = await navigator.translator.translate({ text, targetLanguage: targetLang });
            return translated.text;
        } catch (e) {
            console.warn("Nano Translator Fall√≥, devolviendo original.");
            return text;
        }
    },

    // ----------------------------------------------------------------------
    // 4. FUNCI√ìN DE CUMPLIMIENTO: Rewriter API üñäÔ∏è
    // ----------------------------------------------------------------------
    refactorCode: async (code, instruction) => {
        if (!navigator.rewriter) return code;
        try {
            // Ejemplo de instrucci√≥n Specter: "Refactoriza este c√≥digo JS para usar async/await."
            const response = await navigator.rewriter.rewrite({ text: code, prompt: instruction });
            return response.text;
        } catch (e) {
            console.error("Nano Rewriter Fall√≥:", e);
            return code;
        }
    },
    
    // ----------------------------------------------------------------------
    // 5. FUNCI√ìN DE CUMPLIMIENTO: Writer API ‚úèÔ∏è
    // ----------------------------------------------------------------------
    generateDocstring: async (code) => {
        if (!navigator.writer) return '/* [Docstring no disponible] */\n' + code;
        try {
            const prompt = "Genera un docstring JSDoc completo para la siguiente funci√≥n JavaScript.";
            const response = await navigator.writer.write({ prompt, context: code });
            return response.text + '\n' + code;
        } catch (e) {
            console.warn("Nano Writer Fall√≥.");
            return code;
        }
    },
    
    // ----------------------------------------------------------------------
    // 6. FUNCI√ìN DE CUMPLIMIENTO: Summarizer API üìÑ
    // ----------------------------------------------------------------------
    summarizeFunction: async (code) => {
        if (!navigator.summarizer) return "Prop√≥sito no resumible.";
        try {
            const summary = await navigator.summarizer.summarize({ text: code });
            return summary.text;
        } catch (e) {
            console.error("Nano Summarizer Fall√≥.");
            return "No se pudo resumir el prop√≥sito.";
        }
    },
    
    // NOTA: La funci√≥n analyzeLowRiskSecurity original fue reemplazada por classifyRiskPreliminarily
    // para un flujo h√≠brido m√°s eficiente.
};