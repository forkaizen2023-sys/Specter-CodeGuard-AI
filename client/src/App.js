import React, { useState } from 'react';
import CodeDisplay from './components/CodeDisplay'; // Asumimos que este componente existe
import { NanoIntegrator } from '../nano-api-integrator/NanoIntegrator';
import { runHybridSpecterScan } from '../hybrid-connector/HybridConnector'; 

function SpecterCodeGuardApp() {
    
    const [code, setCode] = useState('');
    const [status, setStatus] = useState('Listo para an√°lisis...');
    const [nanoResults, setNanoResults] = useState(null); 
    const [hybridResults, setHybridResults] = useState(null);
    const [isScanning, setIsScanning] = useState(false);

    // ----------------------------------------------------------------------
    // 2. AN√ÅLISIS AVANZADO (H√çBRIDO: CLOUD RUN/GEMINI API)
    // ----------------------------------------------------------------------
    const handleHybridScan = async (codeToScan, source = 'MANUAL') => {
        setIsScanning(true);
        setStatus(`‚òÅÔ∏è Verificando riesgo con gemini-2.5-pro (${source} trigger)...`);
        setHybridResults(null); 

        try {
            const result = await runHybridSpecterScan(codeToScan); // Llama al backend
            const cvssScore = parseFloat(result.severity); 
            
            if (cvssScore >= 7.0) {
                 setStatus(`üõë RIESGO CR√çTICO (CVSS: ${result.severity}) - ¬°Acci√≥n Inmediata Requerida!`);
            } else {
                 setStatus(`‚ö†Ô∏è Auditor√≠a H√≠brida Completa (CVSS: ${result.severity})`);
            }
            
            setHybridResults(result);

        } catch (error) {
            const errorMessage = error.message || 'Error de conexi√≥n o validaci√≥n de seguridad.';
            setStatus(`‚ùå Fallo de Conexi√≥n/Seguridad: ${errorMessage}`);
        } finally {
            setIsScanning(false);
        }
    };


    // ----------------------------------------------------------------------
    // 1. L√ìGICA DE ESCALADA INTELIGENTE (PUNTO DE ENTRADA H√çBRIDO)
    // ----------------------------------------------------------------------
    const handleLocalScan = async (currentCode) => {
        setCode(currentCode); 
        if (!currentCode.trim()) {
            setStatus('Listo para an√°lisis...');
            setNanoResults(null);
            setHybridResults(null);
            return;
        }

        setStatus('üîç Analizando localmente con Gemini Nano (Clasificaci√≥n)...');
        setHybridResults(null); 
        
        // --- PASO 1: CLASIFICACI√ìN INSTANT√ÅNEA ---
        const classificationResult = await NanoIntegrator.classifyRiskPreliminarily(currentCode);
        setNanoResults(classificationResult);
        
        const severity = classificationResult.severity;
        
        // --- PASO 2: L√ìGICA DE ESCALADA CONDICIONAL ---
        if (severity === 'POSSIBLE' || severity === 'ERROR') {
            // Escalada: Si Nano detecta riesgo, activamos el proceso avanzado
            setStatus('üö® NANO ALERTA: Posible riesgo detectado. Iniciando auditor√≠a de alta fidelidad...');
            await handleHybridScan(currentCode, 'NANO_TRIGGER'); 
            
        } else {
            // Finalizado: Riesgo BAJO.
            setStatus('‚úÖ An√°lisis Nano completado. Riesgo bajo. (M√°xima privacidad).');
            setIsScanning(false);
        }
    };

    const handleCodeChange = (event) => {
        handleLocalScan(event.target.value); 
    };
    
    // Funci√≥n para el bot√≥n manual
    const handleManualHybridScan = () => {
        handleHybridScan(code, 'MANUAL');
    };
    
    return (
        <div className="specter-app">
            <h3>Specter CodeGuard AI</h3>
            <p className={`status-bar ${status.startsWith('‚úÖ') ? 'green' : status.startsWith('üö®') ? 'red' : 'yellow'}`}>
                {status}
            </p>
            
            <textarea
                value={code}
                onChange={handleCodeChange}
                placeholder="Pega tu c√≥digo JS/HTML para an√°lisis instant√°neo..."
                rows="8"
                disabled={isScanning} 
            />

            {/* Visualizaci√≥n del Riesgo Clasificado por Nano */}
            {nanoResults && (
                <div className="nano-output">
                    <h4>Clasificaci√≥n Nano</h4>
                    <p>Riesgo Preliminar: **{nanoResults.severity || 'N/A'}**</p>
                </div>
            )}

            {/* Visualizaci√≥n de Resultados H√≠bridos (CVSS) */}
            {hybridResults && (
                <div className="hybrid-output">
                    <h4>Auditor√≠a H√≠brida Specter (CVSS)</h4>
                    <p>Vulnerabilidad: **{hybridResults.vulnerability || 'N/A'}**</p>
                    <p>Puntuaci√≥n CVSS: **{hybridResults.severity || 'N/A'}**</p>
                    <p>Remediaci√≥n: **{hybridResults.remediation || 'N/A'}**</p>
                </div>
            )}
            
            <button onClick={handleManualHybridScan} disabled={isScanning || !code}>
                Ejecutar Auditor√≠a CVSS Manual
            </button>
        </div>
    );
}

export default SpecterCodeGuardApp;
